{"version":3,"sources":["component/Header.js","component/Employee.js","component/EmployeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Employee","props","state","on","showPlusButton","showMinusButton","tagsInput","tags","class","src","this","pic","alt","firstName","lastName","phone","email","dob","Component","EmployeeContainer","searchHandler","e","setState","key_word","target","value","searchEmployee","keyWord","x","name","first","toLowerCase","includes","last","result","axios","get","then","res","data","results","console","log","type","onChange","placeholder","filter","map","picture","thumbnail","date","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6PAeeA,MAXf,WACI,OACE,yBAAKC,UAAU,6BACf,yBAAKA,UAAU,aACb,wBAAIA,UAAU,yBAAd,sBACA,uBAAGA,UAAU,oBAAb,yF,6CCNaC,E,kDAEjB,WAAYC,GAAO,IAAD,8BACV,cAAMA,IACDC,MAAM,CACPC,IAAG,EACHC,gBAAe,EACfC,iBAAgB,EAChBC,UAAU,GACVC,KAAK,IAPC,E,qDAiBd,OACA,oCACA,2BAAOC,MAAM,SAInB,+BACE,4BAEE,4BACI,yBAAKC,IAAKC,KAAKT,MAAMU,IAAKC,IAAI,sBAElC,4BAAKF,KAAKT,MAAMY,UAAhB,IACIH,KAAKT,MAAMa,UAGf,4BACCJ,KAAKT,MAAMc,OAEZ,4BACCL,KAAKT,MAAMe,OAEZ,4BACCN,KAAKT,MAAMgB,a,GA1CoBC,aCmEvBC,E,kDA5Db,WAAYlB,GAAO,IAAD,8BAChB,cAAMA,IAqBRmB,cAAgB,SAACC,GAEf,EAAKC,SAAS,CAACC,SAASF,EAAEG,OAAOC,SAxBjB,EA2BpBC,eAAiB,SAACC,GACd,OAAO,SAAAC,GACH,OAAOA,EAAEC,KAAKC,MAAMC,cAAcC,SAASL,EAAQI,gBAAgBH,EAAEC,KAAKI,KAAKF,cAAcC,SAASL,EAAQI,iBAAkBJ,IA3BpI,EAAKzB,MAAM,CACPgC,OAAO,GACPX,SAAS,IAJG,E,gEAWjB,IAAD,OAEEY,IAAMC,IAAI,iDACTC,MAAK,SAAAC,GAEF,EAAKhB,SAAS,CAACY,OAAOI,EAAIC,KAAKC,UAC/BC,QAAQC,IAAI,EAAKxC,MAAMgC,a,+BAqB3B,OAEE,6BACA,8BACI,2BAAOS,KAAK,OAAQC,SAAUlC,KAAKU,cAAeyB,YAAY,oBAC9DpB,MAAOf,KAAKR,MAAMqB,YAErBb,KAAKR,MAAMgC,OAAOY,OAAOpC,KAAKgB,eAAehB,KAAKR,MAAMqB,WAAWwB,KAAI,SAAA1B,GACxE,OACA,kBAAC,EAAD,CAAUV,IAAKU,EAAE2B,QAAQC,UAAWpC,UAAWQ,EAAEQ,KAAKC,MAAOhB,SAAUO,EAAEQ,KAAKI,KAC9EjB,MAAOK,EAAEL,MAAOD,MAAOM,EAAEN,MAAOE,IAAKI,EAAEJ,IAAIiC,e,GAlDjBhC,aCkCjBiC,MAlCf,WACE,OACE,yBAAKpD,UAAU,OAEd,kBAAC,EAAD,MAFD,IAKC,kBAAC,EAAD,MALD,MCEgBqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.6e67c192.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"../style/header.css\";\r\n// import Jumbotron from 'react-bootstrap'\r\n\r\nfunction Header () {\r\n    return (\r\n      <div className=\"jumbotron jumbotron-fluid\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4 text-white \">Employee Directory</h1>\r\n        <p className=\"lead text-white \">Click on carets to filter by heading or use the search box to narrow your results.</p>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n\r\nexport default Header;\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\n\r\nexport default class Employee extends Component {\r\n\r\n    constructor(props){\r\n            super(props);\r\n            this.state={\r\n                on:false,\r\n                showPlusButton:true,\r\n                showMinusButton:false,\r\n                tagsInput:'',\r\n                tags:[]\r\n            }\r\n    }\r\n    \r\n   \r\n    \r\n\r\n    render()\r\n    {\r\n       \r\n        return(\r\n        <>\r\n        <table class=\"table\">\r\n        \r\n            \r\n  \r\n  <tbody>\r\n    <tr>\r\n     \r\n      <td>\r\n          <img src={this.props.pic} alt=\"employee  avatar\"/>\r\n        </td>\r\n      <td>{this.props.firstName}, \r\n         {this.props.lastName}\r\n         </td>\r\n         \r\n      <td>\r\n      {this.props.phone}\r\n      </td>\r\n      <td>\r\n      {this.props.email}\r\n      </td>\r\n      <td>\r\n      {this.props.dob}\r\n      </td>\r\n    </tr>\r\n    </tbody>             \r\n           \r\n\r\n    </table>\r\n\r\n    </>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from'axios';\r\nimport Employee from '../component/Employee'\r\n\r\n\r\n\r\n\r\n\r\nclass EmployeeContainer extends Component {\r\n \r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n        result:[],\r\n        key_word:'',\r\n       \r\n    }\r\n}\r\n  // When this component mounts, search for the movie \"The Matrix\"\r\n  \r\n  componentDidMount()\r\n  {\r\n \r\n    axios.get('https://randomuser.me/api/?results=200&nat=us')\r\n    .then(res=>{\r\n        \r\n        this.setState({result:res.data.results});  \r\n        console.log(this.state.result);      \r\n    }) ;\r\n   \r\n  }\r\n\r\n  searchHandler = (e) => {\r\n\r\n    this.setState({key_word:e.target.value}) ;\r\n}\r\n\r\nsearchEmployee = (keyWord) => {\r\n    return x=>{\r\n        return x.name.first.toLowerCase().includes(keyWord.toLowerCase())||x.name.last.toLowerCase().includes(keyWord.toLowerCase()) ||!keyWord;\r\n    }\r\n}\r\n\r\n\r\n\r\n \r\n\r\n  render() {\r\n    return (\r\n       \r\n      <div>\r\n      <form>\r\n          <input type=\"text\"  onChange={this.searchHandler} placeholder=\"Search by name...\" \r\n          value={this.state.key_word}/>\r\n      </form>\r\n      {this.state.result.filter(this.searchEmployee(this.state.key_word)).map(e=>{\r\n      return (\r\n      <Employee pic={e.picture.thumbnail} firstName={e.name.first} lastName={e.name.last}\r\n      email={e.email} phone={e.phone} dob={e.dob.date} />    \r\n  )\r\n  })\r\n       }\r\n  </div>\r\n                \r\n              )\r\n           \r\n    \r\n  }\r\n}\r\n\r\nexport default EmployeeContainer;\r\n","import React from \"react\";\n// import logo from './logo.svg';\n// import './App.css';\nimport Header from \"./component/Header\";\nimport EmployeeContainer from \"./component/EmployeeContainer\"\n\n\n\nfunction App() {\n  return (\n    <div className='App'>\n    \n     <Header />;\n    \n     \n     <EmployeeContainer />;\n  \n  </div>\n  )\n}\n  \n  \n  \n    // <div className=\"App\">\n    // {/* //   <header className=\"App-header\">\n    // //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    // //     <p>\n    // //       Edit <code>src/App.js</code> and save to reload.\n    // //     </p>\n    // //     <a */}\n    // //       className=\"App-link\"\n    // //       href=\"https://reactjs.org\"\n    // //       target=\"_blank\"\n    // //       rel=\"noopener noreferrer\"\n    // //     >\n    // //       Learn React\n    // //     </a>\n    // //   </header>\n    // </div>\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}